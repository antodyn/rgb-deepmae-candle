use candle_core::{DType, Device, Tensor};
use rand::{prelude::SliceRandom, SeedableRng};
use rand_chacha::ChaCha8Rng;
use rayon::prelude::*;
use std::path::{Path, PathBuf};

const RGB_IMAGE_SIZE: usize = 256;
const RGB_CHANNELS: usize = 3;

#[derive(Default)]
pub struct RGBDataset {
    pub images: Vec<PathBuf>,
}
impl RGBDataset {
    pub fn new(dataset_path: &str, seed: usize, shuffle: bool) -> Self {
        let path = PathBuf::from(dataset_path);

        let mut images: Vec<PathBuf> = walkdir::WalkDir::new(path)
            .into_iter()
            .filter(|p| p.is_ok())
            .filter(|p| p.as_ref().unwrap().path().is_file())
            .map(|p| p.unwrap().into_path())
            .collect::<Vec<PathBuf>>();

        if shuffle {
            let mut rng = ChaCha8Rng::seed_from_u64(seed as u64);
            log::info!("Seed: {}", seed);
            images.shuffle(&mut rng);
        }
        // log::info!("image example: [0: {:?}]", dataset.names()[0]);
        Self { images }
    }
    pub fn len(&self) -> usize {
        self.images.len()
    }
    pub fn batcher(&self, batch_size: usize, device: Device) -> RGBDataloader {
        RGBDataloader::new(
            self.images
                .chunks(batch_size)
                .map(|npz| npz.to_vec())
                .collect(),
            device,
        )
    }
}

pub struct RGBDataloader {
    loader: Vec<Vec<PathBuf>>,
    current_idx: usize,
    max_idx: usize,
    device: Device,
}

impl RGBDataloader {
    pub fn new(loader: Vec<Vec<PathBuf>>, device: Device) -> Self {
        let max_idx = loader.len() - 1;
        let current_idx: usize = 0;
        Self {
            loader,
            current_idx,
            max_idx,
            device,
        }
    }
}

pub fn get_batcher_item(batcher: Vec<PathBuf>) -> (Tensor, Tensor) {
    let (images, labels) = batcher
        .par_iter()
        .map(|p| {
            let temp_np: Vec<(String, Tensor)> = Tensor::read_npz(p).unwrap();
            let image = &temp_np[0];
            let label = &temp_np[1];
            (image.1.clone(), label.1.clone().unsqueeze(0).unwrap())
        })
        .collect::<(Vec<Tensor>, Vec<Tensor>)>();
    let images = Tensor::stack(&images, 0).unwrap();
    let labels = Tensor::stack(&labels, 0).unwrap();
    (images, labels)
}

impl Iterator for RGBDataloader {
    type Item = (Tensor, Tensor);
    fn next(&mut self) -> Option<Self::Item> {
        let batcher = self.loader[self.current_idx].clone();
        self.current_idx += 1;
        if self.current_idx > self.max_idx {
            return None;
        }

        // let mean = Tensor::new(&[0.485f32, 0.456, 0.406], &Device::Cpu)?.reshape((3, 1, 1))?;
        // let std = Tensor::new(&[0.229f32, 0.224, 0.225], &Device::Cpu)?.reshape((3, 1, 1))?;
        // (data.to_dtype(candle::DType::F32)? / 255.)?
        //     .broadcast_sub(&mean)?
        //     .broadcast_div(&std)
        // let images_tensor = (images_tensor.to_dtype(DType::F32).unwrap() / 255.).unwrap();
        // let labels_tensor = Tensor::from_vec(labels.to_vec(), (samples,), &self.device).unwrap();
        // let labels_tensor = labels_tensor.to_dtype(DType::U32).unwrap();
        // Some((
        // images.to_device(&self.device).unwrap(),
        // labels.to_device(&self.device).unwrap(),
        // ))
        Some(get_batcher_item(batcher))
    }
}
